// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authentication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_authentication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authentication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authentication_2eproto;
class AuthenticateWeb;
struct AuthenticateWebDefaultTypeInternal;
extern AuthenticateWebDefaultTypeInternal _AuthenticateWeb_default_instance_;
class AuthenticateWebFailure;
struct AuthenticateWebFailureDefaultTypeInternal;
extern AuthenticateWebFailureDefaultTypeInternal _AuthenticateWebFailure_default_instance_;
class AuthenticateWebSuccess;
struct AuthenticateWebSuccessDefaultTypeInternal;
extern AuthenticateWebSuccessDefaultTypeInternal _AuthenticateWebSuccess_default_instance_;
class CreateAccountWeb;
struct CreateAccountWebDefaultTypeInternal;
extern CreateAccountWebDefaultTypeInternal _CreateAccountWeb_default_instance_;
class CreateAccountWebFailure;
struct CreateAccountWebFailureDefaultTypeInternal;
extern CreateAccountWebFailureDefaultTypeInternal _CreateAccountWebFailure_default_instance_;
class CreateAccountWebSuccess;
struct CreateAccountWebSuccessDefaultTypeInternal;
extern CreateAccountWebSuccessDefaultTypeInternal _CreateAccountWebSuccess_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AuthenticateWeb* Arena::CreateMaybeMessage<::AuthenticateWeb>(Arena*);
template<> ::AuthenticateWebFailure* Arena::CreateMaybeMessage<::AuthenticateWebFailure>(Arena*);
template<> ::AuthenticateWebSuccess* Arena::CreateMaybeMessage<::AuthenticateWebSuccess>(Arena*);
template<> ::CreateAccountWeb* Arena::CreateMaybeMessage<::CreateAccountWeb>(Arena*);
template<> ::CreateAccountWebFailure* Arena::CreateMaybeMessage<::CreateAccountWebFailure>(Arena*);
template<> ::CreateAccountWebSuccess* Arena::CreateMaybeMessage<::CreateAccountWebSuccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CreateAccountWebFailure_Reason : int {
  CreateAccountWebFailure_Reason_ACCOUNT_ALREADY_EXISTS = 0,
  CreateAccountWebFailure_Reason_INVALID_PASSWORD = 1,
  CreateAccountWebFailure_Reason_INTERNAL_SERVER_ERROR = 2,
  CreateAccountWebFailure_Reason_CreateAccountWebFailure_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateAccountWebFailure_Reason_CreateAccountWebFailure_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateAccountWebFailure_Reason_IsValid(int value);
constexpr CreateAccountWebFailure_Reason CreateAccountWebFailure_Reason_Reason_MIN = CreateAccountWebFailure_Reason_ACCOUNT_ALREADY_EXISTS;
constexpr CreateAccountWebFailure_Reason CreateAccountWebFailure_Reason_Reason_MAX = CreateAccountWebFailure_Reason_INTERNAL_SERVER_ERROR;
constexpr int CreateAccountWebFailure_Reason_Reason_ARRAYSIZE = CreateAccountWebFailure_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateAccountWebFailure_Reason_descriptor();
template<typename T>
inline const std::string& CreateAccountWebFailure_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateAccountWebFailure_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateAccountWebFailure_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateAccountWebFailure_Reason_descriptor(), enum_t_value);
}
inline bool CreateAccountWebFailure_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateAccountWebFailure_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateAccountWebFailure_Reason>(
    CreateAccountWebFailure_Reason_descriptor(), name, value);
}
enum AuthenticateWebFailure_Reason : int {
  AuthenticateWebFailure_Reason_INVALID_CREDENTIALS = 0,
  AuthenticateWebFailure_Reason_INTERNAL_SERVER_ERROR = 1,
  AuthenticateWebFailure_Reason_AuthenticateWebFailure_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AuthenticateWebFailure_Reason_AuthenticateWebFailure_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AuthenticateWebFailure_Reason_IsValid(int value);
constexpr AuthenticateWebFailure_Reason AuthenticateWebFailure_Reason_Reason_MIN = AuthenticateWebFailure_Reason_INVALID_CREDENTIALS;
constexpr AuthenticateWebFailure_Reason AuthenticateWebFailure_Reason_Reason_MAX = AuthenticateWebFailure_Reason_INTERNAL_SERVER_ERROR;
constexpr int AuthenticateWebFailure_Reason_Reason_ARRAYSIZE = AuthenticateWebFailure_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticateWebFailure_Reason_descriptor();
template<typename T>
inline const std::string& AuthenticateWebFailure_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticateWebFailure_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticateWebFailure_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticateWebFailure_Reason_descriptor(), enum_t_value);
}
inline bool AuthenticateWebFailure_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthenticateWebFailure_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticateWebFailure_Reason>(
    AuthenticateWebFailure_Reason_descriptor(), name, value);
}
// ===================================================================

class CreateAccountWeb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateAccountWeb) */ {
 public:
  inline CreateAccountWeb() : CreateAccountWeb(nullptr) {}
  ~CreateAccountWeb() override;
  explicit constexpr CreateAccountWeb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWeb(const CreateAccountWeb& from);
  CreateAccountWeb(CreateAccountWeb&& from) noexcept
    : CreateAccountWeb() {
    *this = ::std::move(from);
  }

  inline CreateAccountWeb& operator=(const CreateAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWeb& operator=(CreateAccountWeb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWeb& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWeb* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWeb*>(
               &_CreateAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAccountWeb& a, CreateAccountWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWeb* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWeb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWeb* New() const final {
    return new CreateAccountWeb();
  }

  CreateAccountWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWeb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWeb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountWeb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateAccountWeb";
  }
  protected:
  explicit CreateAccountWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string plaintext_password = 3;
  void clear_plaintext_password();
  const std::string& plaintext_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintext_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintext_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_plaintext_password();
  void set_allocated_plaintext_password(std::string* plaintext_password);
  private:
  const std::string& _internal_plaintext_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintext_password(const std::string& value);
  std::string* _internal_mutable_plaintext_password();
  public:

  // int64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::int64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateAccountWeb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintext_password_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateAccountWebSuccess) */ {
 public:
  inline CreateAccountWebSuccess() : CreateAccountWebSuccess(nullptr) {}
  ~CreateAccountWebSuccess() override;
  explicit constexpr CreateAccountWebSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWebSuccess(const CreateAccountWebSuccess& from);
  CreateAccountWebSuccess(CreateAccountWebSuccess&& from) noexcept
    : CreateAccountWebSuccess() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebSuccess& operator=(const CreateAccountWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebSuccess& operator=(CreateAccountWebSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWebSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWebSuccess* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebSuccess*>(
               &_CreateAccountWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateAccountWebSuccess& a, CreateAccountWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebSuccess* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebSuccess* New() const final {
    return new CreateAccountWebSuccess();
  }

  CreateAccountWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWebSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountWebSuccess& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateAccountWebSuccess";
  }
  protected:
  explicit CreateAccountWebSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // int64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::int64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateAccountWebSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateAccountWebFailure) */ {
 public:
  inline CreateAccountWebFailure() : CreateAccountWebFailure(nullptr) {}
  ~CreateAccountWebFailure() override;
  explicit constexpr CreateAccountWebFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWebFailure(const CreateAccountWebFailure& from);
  CreateAccountWebFailure(CreateAccountWebFailure&& from) noexcept
    : CreateAccountWebFailure() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebFailure& operator=(const CreateAccountWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebFailure& operator=(CreateAccountWebFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWebFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWebFailure* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebFailure*>(
               &_CreateAccountWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateAccountWebFailure& a, CreateAccountWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebFailure* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountWebFailure* New() const final {
    return new CreateAccountWebFailure();
  }

  CreateAccountWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountWebFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWebFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountWebFailure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateAccountWebFailure";
  }
  protected:
  explicit CreateAccountWebFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateAccountWebFailure_Reason Reason;
  static constexpr Reason ACCOUNT_ALREADY_EXISTS =
    CreateAccountWebFailure_Reason_ACCOUNT_ALREADY_EXISTS;
  static constexpr Reason INVALID_PASSWORD =
    CreateAccountWebFailure_Reason_INVALID_PASSWORD;
  static constexpr Reason INTERNAL_SERVER_ERROR =
    CreateAccountWebFailure_Reason_INTERNAL_SERVER_ERROR;
  static inline bool Reason_IsValid(int value) {
    return CreateAccountWebFailure_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    CreateAccountWebFailure_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    CreateAccountWebFailure_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    CreateAccountWebFailure_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return CreateAccountWebFailure_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return CreateAccountWebFailure_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return CreateAccountWebFailure_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // int64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::int64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .CreateAccountWebFailure.Reason reason = 2;
  void clear_reason();
  ::CreateAccountWebFailure_Reason reason() const;
  void set_reason(::CreateAccountWebFailure_Reason value);
  private:
  ::CreateAccountWebFailure_Reason _internal_reason() const;
  void _internal_set_reason(::CreateAccountWebFailure_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:CreateAccountWebFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_id_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWeb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthenticateWeb) */ {
 public:
  inline AuthenticateWeb() : AuthenticateWeb(nullptr) {}
  ~AuthenticateWeb() override;
  explicit constexpr AuthenticateWeb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWeb(const AuthenticateWeb& from);
  AuthenticateWeb(AuthenticateWeb&& from) noexcept
    : AuthenticateWeb() {
    *this = ::std::move(from);
  }

  inline AuthenticateWeb& operator=(const AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWeb& operator=(AuthenticateWeb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWeb& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWeb*>(
               &_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticateWeb& a, AuthenticateWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWeb* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWeb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWeb* New() const final {
    return new AuthenticateWeb();
  }

  AuthenticateWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWeb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWeb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateWeb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthenticateWeb";
  }
  protected:
  explicit AuthenticateWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string plaintext_password = 3;
  void clear_plaintext_password();
  const std::string& plaintext_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintext_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintext_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_plaintext_password();
  void set_allocated_plaintext_password(std::string* plaintext_password);
  private:
  const std::string& _internal_plaintext_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintext_password(const std::string& value);
  std::string* _internal_mutable_plaintext_password();
  public:

  // int64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::int64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AuthenticateWeb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintext_password_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthenticateWebSuccess) */ {
 public:
  inline AuthenticateWebSuccess() : AuthenticateWebSuccess(nullptr) {}
  ~AuthenticateWebSuccess() override;
  explicit constexpr AuthenticateWebSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWebSuccess(const AuthenticateWebSuccess& from);
  AuthenticateWebSuccess(AuthenticateWebSuccess&& from) noexcept
    : AuthenticateWebSuccess() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebSuccess& operator=(const AuthenticateWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebSuccess& operator=(AuthenticateWebSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWebSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWebSuccess* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebSuccess*>(
               &_AuthenticateWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthenticateWebSuccess& a, AuthenticateWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebSuccess* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebSuccess* New() const final {
    return new AuthenticateWebSuccess();
  }

  AuthenticateWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWebSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateWebSuccess& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthenticateWebSuccess";
  }
  protected:
  explicit AuthenticateWebSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string creation_date = 3;
  void clear_creation_date();
  const std::string& creation_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creation_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creation_date();
  PROTOBUF_MUST_USE_RESULT std::string* release_creation_date();
  void set_allocated_creation_date(std::string* creation_date);
  private:
  const std::string& _internal_creation_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creation_date(const std::string& value);
  std::string* _internal_mutable_creation_date();
  public:

  // int64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::int64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AuthenticateWebSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creation_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthenticateWebFailure) */ {
 public:
  inline AuthenticateWebFailure() : AuthenticateWebFailure(nullptr) {}
  ~AuthenticateWebFailure() override;
  explicit constexpr AuthenticateWebFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWebFailure(const AuthenticateWebFailure& from);
  AuthenticateWebFailure(AuthenticateWebFailure&& from) noexcept
    : AuthenticateWebFailure() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebFailure& operator=(const AuthenticateWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebFailure& operator=(AuthenticateWebFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWebFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWebFailure* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebFailure*>(
               &_AuthenticateWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthenticateWebFailure& a, AuthenticateWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebFailure* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWebFailure* New() const final {
    return new AuthenticateWebFailure();
  }

  AuthenticateWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWebFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWebFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateWebFailure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthenticateWebFailure";
  }
  protected:
  explicit AuthenticateWebFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthenticateWebFailure_Reason Reason;
  static constexpr Reason INVALID_CREDENTIALS =
    AuthenticateWebFailure_Reason_INVALID_CREDENTIALS;
  static constexpr Reason INTERNAL_SERVER_ERROR =
    AuthenticateWebFailure_Reason_INTERNAL_SERVER_ERROR;
  static inline bool Reason_IsValid(int value) {
    return AuthenticateWebFailure_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    AuthenticateWebFailure_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    AuthenticateWebFailure_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    AuthenticateWebFailure_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return AuthenticateWebFailure_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return AuthenticateWebFailure_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return AuthenticateWebFailure_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // int64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::int64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .AuthenticateWebFailure.Reason reason = 2;
  void clear_reason();
  ::AuthenticateWebFailure_Reason reason() const;
  void set_reason(::AuthenticateWebFailure_Reason value);
  private:
  ::AuthenticateWebFailure_Reason _internal_reason() const;
  void _internal_set_reason(::AuthenticateWebFailure_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:AuthenticateWebFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_id_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authentication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAccountWeb

// int64 request_id = 1;
inline void CreateAccountWeb::clear_request_id() {
  request_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWeb::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWeb::request_id() const {
  // @@protoc_insertion_point(field_get:CreateAccountWeb.request_id)
  return _internal_request_id();
}
inline void CreateAccountWeb::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  request_id_ = value;
}
inline void CreateAccountWeb::set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CreateAccountWeb.request_id)
}

// string email = 2;
inline void CreateAccountWeb::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& CreateAccountWeb::email() const {
  // @@protoc_insertion_point(field_get:CreateAccountWeb.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountWeb::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateAccountWeb.email)
}
inline std::string* CreateAccountWeb::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:CreateAccountWeb.email)
  return _s;
}
inline const std::string& CreateAccountWeb::_internal_email() const {
  return email_.Get();
}
inline void CreateAccountWeb::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::release_email() {
  // @@protoc_insertion_point(field_release:CreateAccountWeb.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateAccountWeb.email)
}

// string plaintext_password = 3;
inline void CreateAccountWeb::clear_plaintext_password() {
  plaintext_password_.ClearToEmpty();
}
inline const std::string& CreateAccountWeb::plaintext_password() const {
  // @@protoc_insertion_point(field_get:CreateAccountWeb.plaintext_password)
  return _internal_plaintext_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountWeb::set_plaintext_password(ArgT0&& arg0, ArgT... args) {
 
 plaintext_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateAccountWeb.plaintext_password)
}
inline std::string* CreateAccountWeb::mutable_plaintext_password() {
  std::string* _s = _internal_mutable_plaintext_password();
  // @@protoc_insertion_point(field_mutable:CreateAccountWeb.plaintext_password)
  return _s;
}
inline const std::string& CreateAccountWeb::_internal_plaintext_password() const {
  return plaintext_password_.Get();
}
inline void CreateAccountWeb::_internal_set_plaintext_password(const std::string& value) {
  
  plaintext_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::_internal_mutable_plaintext_password() {
  
  return plaintext_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::release_plaintext_password() {
  // @@protoc_insertion_point(field_release:CreateAccountWeb.plaintext_password)
  return plaintext_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountWeb::set_allocated_plaintext_password(std::string* plaintext_password) {
  if (plaintext_password != nullptr) {
    
  } else {
    
  }
  plaintext_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintext_password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateAccountWeb.plaintext_password)
}

// -------------------------------------------------------------------

// CreateAccountWebSuccess

// int64 request_id = 1;
inline void CreateAccountWebSuccess::clear_request_id() {
  request_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::request_id() const {
  // @@protoc_insertion_point(field_get:CreateAccountWebSuccess.request_id)
  return _internal_request_id();
}
inline void CreateAccountWebSuccess::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  request_id_ = value;
}
inline void CreateAccountWebSuccess::set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CreateAccountWebSuccess.request_id)
}

// int64 user_id = 2;
inline void CreateAccountWebSuccess::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebSuccess::user_id() const {
  // @@protoc_insertion_point(field_get:CreateAccountWebSuccess.user_id)
  return _internal_user_id();
}
inline void CreateAccountWebSuccess::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void CreateAccountWebSuccess::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CreateAccountWebSuccess.user_id)
}

// -------------------------------------------------------------------

// CreateAccountWebFailure

// int64 request_id = 1;
inline void CreateAccountWebFailure::clear_request_id() {
  request_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebFailure::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountWebFailure::request_id() const {
  // @@protoc_insertion_point(field_get:CreateAccountWebFailure.request_id)
  return _internal_request_id();
}
inline void CreateAccountWebFailure::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  request_id_ = value;
}
inline void CreateAccountWebFailure::set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CreateAccountWebFailure.request_id)
}

// .CreateAccountWebFailure.Reason reason = 2;
inline void CreateAccountWebFailure::clear_reason() {
  reason_ = 0;
}
inline ::CreateAccountWebFailure_Reason CreateAccountWebFailure::_internal_reason() const {
  return static_cast< ::CreateAccountWebFailure_Reason >(reason_);
}
inline ::CreateAccountWebFailure_Reason CreateAccountWebFailure::reason() const {
  // @@protoc_insertion_point(field_get:CreateAccountWebFailure.reason)
  return _internal_reason();
}
inline void CreateAccountWebFailure::_internal_set_reason(::CreateAccountWebFailure_Reason value) {
  
  reason_ = value;
}
inline void CreateAccountWebFailure::set_reason(::CreateAccountWebFailure_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CreateAccountWebFailure.reason)
}

// -------------------------------------------------------------------

// AuthenticateWeb

// int64 request_id = 1;
inline void AuthenticateWeb::clear_request_id() {
  request_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWeb::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWeb::request_id() const {
  // @@protoc_insertion_point(field_get:AuthenticateWeb.request_id)
  return _internal_request_id();
}
inline void AuthenticateWeb::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  request_id_ = value;
}
inline void AuthenticateWeb::set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:AuthenticateWeb.request_id)
}

// string email = 2;
inline void AuthenticateWeb::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& AuthenticateWeb::email() const {
  // @@protoc_insertion_point(field_get:AuthenticateWeb.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWeb::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:AuthenticateWeb.email)
  return _s;
}
inline const std::string& AuthenticateWeb::_internal_email() const {
  return email_.Get();
}
inline void AuthenticateWeb::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::release_email() {
  // @@protoc_insertion_point(field_release:AuthenticateWeb.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AuthenticateWeb.email)
}

// string plaintext_password = 3;
inline void AuthenticateWeb::clear_plaintext_password() {
  plaintext_password_.ClearToEmpty();
}
inline const std::string& AuthenticateWeb::plaintext_password() const {
  // @@protoc_insertion_point(field_get:AuthenticateWeb.plaintext_password)
  return _internal_plaintext_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWeb::set_plaintext_password(ArgT0&& arg0, ArgT... args) {
 
 plaintext_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AuthenticateWeb.plaintext_password)
}
inline std::string* AuthenticateWeb::mutable_plaintext_password() {
  std::string* _s = _internal_mutable_plaintext_password();
  // @@protoc_insertion_point(field_mutable:AuthenticateWeb.plaintext_password)
  return _s;
}
inline const std::string& AuthenticateWeb::_internal_plaintext_password() const {
  return plaintext_password_.Get();
}
inline void AuthenticateWeb::_internal_set_plaintext_password(const std::string& value) {
  
  plaintext_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::_internal_mutable_plaintext_password() {
  
  return plaintext_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::release_plaintext_password() {
  // @@protoc_insertion_point(field_release:AuthenticateWeb.plaintext_password)
  return plaintext_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateWeb::set_allocated_plaintext_password(std::string* plaintext_password) {
  if (plaintext_password != nullptr) {
    
  } else {
    
  }
  plaintext_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintext_password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AuthenticateWeb.plaintext_password)
}

// -------------------------------------------------------------------

// AuthenticateWebSuccess

// int64 request_id = 1;
inline void AuthenticateWebSuccess::clear_request_id() {
  request_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::request_id() const {
  // @@protoc_insertion_point(field_get:AuthenticateWebSuccess.request_id)
  return _internal_request_id();
}
inline void AuthenticateWebSuccess::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  request_id_ = value;
}
inline void AuthenticateWebSuccess::set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:AuthenticateWebSuccess.request_id)
}

// int64 user_id = 2;
inline void AuthenticateWebSuccess::clear_user_id() {
  user_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebSuccess::user_id() const {
  // @@protoc_insertion_point(field_get:AuthenticateWebSuccess.user_id)
  return _internal_user_id();
}
inline void AuthenticateWebSuccess::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void AuthenticateWebSuccess::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:AuthenticateWebSuccess.user_id)
}

// string creation_date = 3;
inline void AuthenticateWebSuccess::clear_creation_date() {
  creation_date_.ClearToEmpty();
}
inline const std::string& AuthenticateWebSuccess::creation_date() const {
  // @@protoc_insertion_point(field_get:AuthenticateWebSuccess.creation_date)
  return _internal_creation_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWebSuccess::set_creation_date(ArgT0&& arg0, ArgT... args) {
 
 creation_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AuthenticateWebSuccess.creation_date)
}
inline std::string* AuthenticateWebSuccess::mutable_creation_date() {
  std::string* _s = _internal_mutable_creation_date();
  // @@protoc_insertion_point(field_mutable:AuthenticateWebSuccess.creation_date)
  return _s;
}
inline const std::string& AuthenticateWebSuccess::_internal_creation_date() const {
  return creation_date_.Get();
}
inline void AuthenticateWebSuccess::_internal_set_creation_date(const std::string& value) {
  
  creation_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateWebSuccess::_internal_mutable_creation_date() {
  
  return creation_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateWebSuccess::release_creation_date() {
  // @@protoc_insertion_point(field_release:AuthenticateWebSuccess.creation_date)
  return creation_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateWebSuccess::set_allocated_creation_date(std::string* creation_date) {
  if (creation_date != nullptr) {
    
  } else {
    
  }
  creation_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creation_date,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AuthenticateWebSuccess.creation_date)
}

// -------------------------------------------------------------------

// AuthenticateWebFailure

// int64 request_id = 1;
inline void AuthenticateWebFailure::clear_request_id() {
  request_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebFailure::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateWebFailure::request_id() const {
  // @@protoc_insertion_point(field_get:AuthenticateWebFailure.request_id)
  return _internal_request_id();
}
inline void AuthenticateWebFailure::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  request_id_ = value;
}
inline void AuthenticateWebFailure::set_request_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:AuthenticateWebFailure.request_id)
}

// .AuthenticateWebFailure.Reason reason = 2;
inline void AuthenticateWebFailure::clear_reason() {
  reason_ = 0;
}
inline ::AuthenticateWebFailure_Reason AuthenticateWebFailure::_internal_reason() const {
  return static_cast< ::AuthenticateWebFailure_Reason >(reason_);
}
inline ::AuthenticateWebFailure_Reason AuthenticateWebFailure::reason() const {
  // @@protoc_insertion_point(field_get:AuthenticateWebFailure.reason)
  return _internal_reason();
}
inline void AuthenticateWebFailure::_internal_set_reason(::AuthenticateWebFailure_Reason value) {
  
  reason_ = value;
}
inline void AuthenticateWebFailure::set_reason(::AuthenticateWebFailure_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:AuthenticateWebFailure.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CreateAccountWebFailure_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CreateAccountWebFailure_Reason>() {
  return ::CreateAccountWebFailure_Reason_descriptor();
}
template <> struct is_proto_enum< ::AuthenticateWebFailure_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AuthenticateWebFailure_Reason>() {
  return ::AuthenticateWebFailure_Reason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto
